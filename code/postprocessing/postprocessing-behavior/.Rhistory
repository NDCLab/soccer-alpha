}
source("functions/validate_against_eeg.R")
# test loading the eeg summary table
eeg_table <- load_eeg_summary_table("2025-10-11", matlab_erp_dir)
# look at the structure
head(eeg_table)
names(eeg_table)
# check what's in the eeg postprocessing folder
eeg_folder <- file.path(matlab_erp_dir, "2025-10-11_erp-postprocessing")
list.files(eeg_folder, pattern = "subject_summary")
# read the most recent file manually
test_file <- file.path(eeg_folder, "subject_summary_table_2025-10-11_21-40-38.txt")
test_data <- read_delim(test_file, delim = "\t", show_col_types = FALSE)
head(test_data)
# validate_against_eeg.r - compare behavioral postprocessing to eeg postprocessing
# author: marlene buch
library(tidyverse)
load_eeg_summary_table <- function(eeg_date, derivatives_dir) {
# load most recent eeg subject summary table from specified date
#
# inputs:
#   eeg_date - date string (e.g., "2025-10-08")
#   derivatives_dir - path to derivatives folder
#
# outputs:
#   tibble with eeg summary data
# construct path to eeg postprocessing folder for that date
eeg_folder <- file.path(derivatives_dir, paste0(eeg_date, "_erp-postprocessing"))
if (!dir.exists(eeg_folder)) {
stop("eeg postprocessing folder not found: ", eeg_folder)
}
# find all subject_summary_table files in that folder
table_files <- list.files(eeg_folder,
pattern = "^subject_summary_table_.*\\.txt$",
full.names = TRUE)
if (length(table_files) == 0) {
stop("no subject_summary_table files found in: ", eeg_folder)
}
# extract timestamps from filenames to find most recent
# pattern: subject_summary_table_YYYY-MM-DD_HH-MM-SS.txt
timestamps <- str_extract(basename(table_files), "\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}")
timestamps <- as.POSIXct(timestamps, format = "%Y-%m-%d_%H-%M-%S")
# find most recent file
most_recent_idx <- which.max(timestamps)
most_recent_file <- table_files[most_recent_idx]
message("loading eeg summary table:")
message("  ", basename(most_recent_file))
# read tab-separated file
eeg_data <- read_delim(most_recent_file, delim = "\t", show_col_types = FALSE)
message("  loaded ", nrow(eeg_data), " subjects from eeg postprocessing")
return(eeg_data)
}
compare_behavioral_to_eeg <- function(behavioral_results, eeg_data) {
# compare behavioral postprocessing results to eeg postprocessing
# flag any discrepancies in trial counts
#
# inputs:
#   behavioral_results - list from check_all_subjects()
#   eeg_data - tibble from load_eeg_summary_table()
#
# outputs:
#   comparison results with discrepancies flagged
message("\nvalidating behavioral postprocessing against eeg postprocessing...")
# extract behavioral stats into comparable format
behavioral_summary <- map_dfr(names(behavioral_results), function(subj) {
result <- behavioral_results[[subj]]
# get counts for each code
counts <- result$condition_counts %>%
select(code, final_trials)
# get exclusion counts from original data (need to pass this in separately)
tibble(
subject = subj,
included = result$included_in_dataset,
accuracy = result$overall_accuracy
) %>%
bind_cols(
counts %>%
pivot_wider(names_from = code, values_from = final_trials, names_prefix = "code_")
)
})
# match subjects between behavioral & eeg
eeg_clean <- eeg_data %>%
mutate(subject = as.character(ID))
common_subjects <- intersect(behavioral_summary$subject, eeg_clean$subject)
message("  subjects in both datasets: ", length(common_subjects))
if (length(common_subjects) == 0) {
warning("no common subjects found between behavioral and eeg data")
return(NULL)
}
# compare trial counts for common subjects
discrepancies <- tibble()
for (subj in common_subjects) {
beh_row <- behavioral_summary %>% filter(subject == subj)
eeg_row <- eeg_clean %>% filter(subject == subj)
# compare each code
for (code in ALL_CODES) {
beh_col <- paste0("code_", code)
eeg_col <- paste0(code, " (", ALL_CODE_NAMES[as.character(code)], ")")
if (beh_col %in% names(beh_row) && eeg_col %in% names(eeg_row)) {
beh_count <- beh_row[[beh_col]]
eeg_count <- eeg_row[[eeg_col]]
if (!is.na(beh_count) && !is.na(eeg_count) && beh_count != eeg_count) {
discrepancies <- bind_rows(discrepancies, tibble(
subject = subj,
code = code,
behavioral_count = beh_count,
eeg_count = eeg_count,
difference = beh_count - eeg_count
))
}
}
}
}
if (nrow(discrepancies) == 0) {
message("  âœ“ all trial counts match between behavioral and eeg!")
} else {
warning(nrow(discrepancies), " discrepancies found:")
print(discrepancies)
}
return(list(
common_subjects = common_subjects,
discrepancies = discrepancies,
match_rate = 1 - (nrow(discrepancies) / (length(common_subjects) * length(ALL_CODES)))
))
}
source("functions/validate_against_eeg.R")
eeg_table <- load_eeg_summary_table("2025-10-11", matlab_erp_dir)
head(eeg_table)
# load and process multiple subjects (let's do first 3 to test)
test_subjects <- c("390001", "390002", "390003")
all_data <- load_behavioral_data(behavioral_dir, subjects = test_subjects)
all_excluded <- apply_exclusions(all_data)
all_trimmed <- apply_rt_trimming(all_excluded)
all_inclusion <- check_all_subjects(all_trimmed)
# now test validation
validation_result <- compare_behavioral_to_eeg(all_inclusion, eeg_table)
# check detailed stats for subject 390002, code 204
all_trimmed %>%
filter(subject == "390002", code == 204) %>%
summarize(
total = n(),
excluded_before = sum(exclude_before_rt),
rt_min_excluded = sum(exclude_rt_min),
outliers = sum(exclude_rt_outlier),
final = sum(kept_for_rt_analysis),
rt_mean = mean(flankerResponse.rt[!exclude_rt_min], na.rm = TRUE),
rt_sd = sd(flankerResponse.rt[!exclude_rt_min], na.rm = TRUE)
)
# find the outlier trial(s) for subject 390002, code 204
all_trimmed %>%
filter(subject == "390002", code == 204, exclude_rt_outlier == TRUE) %>%
select(flankerResponse.rt, rt_mean, rt_sd) %>%
mutate(
z_score = abs(flankerResponse.rt - rt_mean) / rt_sd,
threshold = RT_OUTLIER_THRESHOLD
)
eeg_table %>%
filter(ID == 390002) %>%
select(ID, Status, `Multiple Key (nr)`, `Too Slow (nr)`,
`RT Min Removed (nr)`, `RT Outliers Removed (nr)`,
`204 (nonsoc-invis-NFG)`)
# how many total trials do we have in behavioral vs what matlab reports?
all_data %>%
filter(subject == "390002") %>%
summarize(
total_trials = n(),
test_trials = sum(!is.na(code)),
analyzed_codes = sum(code %in% ALL_CODES)
)
# load_eeg_trial_info.r - extract trial-level info from preprocessed eeg .set files
# author: marlene buch
library(tidyverse)
load_eeg_trial_info <- function(eeg_dir, subjects = NULL, verbose = TRUE) {
# read preprocessed eeg .set files & extract which behavioral trials survived eeg preprocessing
#
# inputs:
#   eeg_dir - path to preprocessed eeg folder (e.g., derivatives/preprocessed/s1_r1/eeg)
#   subjects - optional vector of subject ids to load (e.g., c("390001", "390002"))
#   verbose - print diagnostic info while loading
#
# outputs:
#   tibble with columns:
#     - subject: subject id
#     - trial_idx: original behavioral trial number (from csv row)
#     - beh_code: behavioral code for this trial
#     - eeg_included: TRUE (all trials in output survived eeg preprocessing)
if (verbose) message("loading eeg trial info from .set files...")
if (verbose) message("  eeg directory: ", eeg_dir)
# check if eegUtils package is available for reading .set files
if (!requireNamespace("eegUtils", quietly = TRUE)) {
stop("eegUtils package required. install with: remotes::install_github('craddm/eegUtils')")
}
# find all subject directories
subject_dirs <- list.dirs(eeg_dir, recursive = FALSE, full.names = TRUE)
if (length(subject_dirs) == 0) {
stop("no subject directories found in: ", eeg_dir)
}
# filter to requested subjects if specified
if (!is.null(subjects)) {
subject_pattern <- paste0("sub-", subjects, collapse = "|")
subject_dirs <- subject_dirs[str_detect(basename(subject_dirs), subject_pattern)]
}
if (verbose) message("  found ", length(subject_dirs), " subject directories")
# load trial info from each subject's .set file
all_trial_info <- map_dfr(subject_dirs, function(subject_dir) {
# extract subject id
subject_id <- str_extract(basename(subject_dir), "\\d+")
if (verbose) message("  processing subject ", subject_id)
# find preprocessed .set file (final output from MADE pipeline)
# pattern: sub-XXXXXX_soccer-test_processed_data_s1_r1_e1.set
set_files <- list.files(subject_dir,
pattern = ".*_processed_data_.*\\.set$",
full.names = TRUE)
if (length(set_files) == 0) {
warning("  no processed .set file found for subject ", subject_id)
return(NULL)
}
if (length(set_files) > 1) {
warning("  multiple .set files found for subject ", subject_id, ", using first")
}
# read .set file using eegUtils
tryCatch({
eeg_data <- eegUtils::read_eeg(set_files[1])
# extract epoch metadata
# eegUtils stores epoch info in epochs slot
if (is.null(eeg_data$epochs)) {
warning("  no epoch info found for subject ", subject_id)
return(NULL)
}
epochs_df <- eeg_data$epochs
# check if required columns exist
if (!("trial_idx" %in% names(epochs_df)) || !("beh_code" %in% names(epochs_df))) {
warning("  missing trial_idx or beh_code in epochs for subject ", subject_id)
return(NULL)
}
# extract trial info
trial_info <- epochs_df %>%
select(epoch, trial_idx, beh_code) %>%
mutate(
subject = subject_id,
eeg_included = TRUE  # all trials in this file survived eeg preprocessing
) %>%
select(subject, trial_idx, beh_code, eeg_included)
if (verbose) {
message("    loaded ", nrow(trial_info), " epochs")
message("    behavioral codes present: ",
paste(sort(unique(trial_info$beh_code)), collapse = ", "))
}
return(trial_info)
}, error = function(e) {
warning("  error reading .set file for subject ", subject_id, ": ", e$message)
return(NULL)
})
})
if (nrow(all_trial_info) == 0) {
stop("no trial info loaded from any subjects")
}
if (verbose) {
message("\n=== LOADING COMPLETE ===")
message("  subjects loaded: ", n_distinct(all_trial_info$subject))
message("  total eeg-included trials: ", nrow(all_trial_info))
message("  trials per subject (mean): ", round(nrow(all_trial_info) / n_distinct(all_trial_info$subject), 1))
}
return(all_trial_info)
}
# === TESTING FUNCTION ===
test_eeg_trial_loading <- function(eeg_dir, test_subject = NULL) {
# test the eeg trial info loading with diagnostic output
#
# inputs:
#   eeg_dir - path to preprocessed eeg folder
#   test_subject - optional single subject id to test (e.g., "390002")
cat("\n=== TESTING EEG TRIAL INFO LOADING ===\n\n")
# test 1: load one subject
if (!is.null(test_subject)) {
cat("TEST 1: loading single subject (", test_subject, ")\n")
cat("-------------------------------------------\n")
trial_info <- load_eeg_trial_info(eeg_dir, subjects = test_subject, verbose = TRUE)
cat("\nRESULTS:\n")
print(head(trial_info, 10))
cat("\nSUMMARY STATISTICS:\n")
cat("  total trials:", nrow(trial_info), "\n")
cat("  trial_idx range:", min(trial_info$trial_idx), "-", max(trial_info$trial_idx), "\n")
cat("  unique codes:", paste(sort(unique(trial_info$beh_code)), collapse = ", "), "\n")
# check for issues
cat("\nVALIDATION CHECKS:\n")
if (any(is.na(trial_info$trial_idx))) {
cat("  âœ— WARNING: found", sum(is.na(trial_info$trial_idx)), "NA trial_idx values\n")
} else {
cat("  âœ“ no NA trial_idx values\n")
}
if (any(duplicated(trial_info$trial_idx))) {
cat("  âœ— WARNING: found duplicate trial_idx values\n")
} else {
cat("  âœ“ no duplicate trial_idx values\n")
}
return(trial_info)
}
# test 2: load all subjects
cat("TEST 2: loading all subjects\n")
cat("-------------------------------------------\n")
all_trial_info <- load_eeg_trial_info(eeg_dir, verbose = TRUE)
cat("\nPER-SUBJECT SUMMARY:\n")
subject_summary <- all_trial_info %>%
group_by(subject) %>%
summarise(
n_trials = n(),
n_codes = n_distinct(beh_code),
codes_present = paste(sort(unique(beh_code)), collapse = ",")
) %>%
arrange(subject)
print(subject_summary)
return(all_trial_info)
}
# in your r console, from the postprocessing-behavior project:
source("config/paths.R")
source("functions/load_eeg_trial_info.R")
# test with one subject
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
install.packages("R.matlab")
# load_eeg_trial_info.r - extract trial-level info from preprocessed eeg .set files
# author: marlene buch
library(tidyverse)
library(R.matlab)  # for reading .mat files (eeglab .set files are .mat format)
load_eeg_trial_info <- function(eeg_dir, subjects = NULL, verbose = TRUE) {
# read preprocessed eeg .set files & extract which behavioral trials survived eeg preprocessing
#
# inputs:
#   eeg_dir - path to preprocessed eeg folder (e.g., derivatives/preprocessed/s1_r1/eeg)
#   subjects - optional vector of subject ids to load (e.g., c("390001", "390002"))
#   verbose - print diagnostic info while loading
#
# outputs:
#   tibble with columns:
#     - subject: subject id
#     - trial_idx: original behavioral trial number (from csv row)
#     - beh_code: behavioral code for this trial
#     - eeg_included: TRUE (all trials in output survived eeg preprocessing)
if (verbose) message("loading eeg trial info from .set files...")
if (verbose) message("  eeg directory: ", eeg_dir)
# find all subject directories
subject_dirs <- list.dirs(eeg_dir, recursive = FALSE, full.names = TRUE)
if (length(subject_dirs) == 0) {
stop("no subject directories found in: ", eeg_dir)
}
# filter to requested subjects if specified
if (!is.null(subjects)) {
subject_pattern <- paste0("sub-", subjects, collapse = "|")
subject_dirs <- subject_dirs[str_detect(basename(subject_dirs), subject_pattern)]
}
if (verbose) message("  found ", length(subject_dirs), " subject directories")
# load trial info from each subject's .set file
all_trial_info <- map_dfr(subject_dirs, function(subject_dir) {
# extract subject id
subject_id <- str_extract(basename(subject_dir), "\\d+")
if (verbose) message("  processing subject ", subject_id)
# find preprocessed .set file (final output from MADE pipeline)
# pattern: sub-XXXXXX_soccer-test_processed_data_s1_r1_e1.set
set_files <- list.files(subject_dir,
pattern = ".*_processed_data_.*\\.set$",
full.names = TRUE)
if (length(set_files) == 0) {
warning("  no processed .set file found for subject ", subject_id)
return(NULL)
}
if (length(set_files) > 1) {
warning("  multiple .set files found for subject ", subject_id, ", using first")
}
# read .set file (eeglab .set files are matlab .mat format)
tryCatch({
eeg_data <- readMat(set_files[1])
# extract EEG structure (stored as EEG in the .mat file)
EEG <- eeg_data$EEG
# extract epoch metadata
# in eeglab, epoch info is in EEG.epoch (array of structs)
epochs <- EEG[,, 1]$epoch
if (is.null(epochs) || length(epochs) == 0) {
warning("  no epoch info found for subject ", subject_id)
return(NULL)
}
n_epochs <- dim(epochs)[2]  # epochs are stored as columns
# extract trial_idx & beh_code from each epoch
trial_indices <- numeric(n_epochs)
beh_codes <- numeric(n_epochs)
for (i in 1:n_epochs) {
epoch_data <- epochs[, i]
# extract beh.trial.nr (stored in epoch structure)
# structure: epoch[[i]]$beh.trial.nr
if (!is.null(epoch_data$beh.trial.nr)) {
trial_indices[i] <- epoch_data$beh.trial.nr[[1]]
} else if (!is.null(epoch_data$trial.idx)) {
trial_indices[i] <- epoch_data$trial.idx[[1]]
} else {
warning("  missing trial index for epoch ", i, " in subject ", subject_id)
trial_indices[i] <- NA
}
# extract beh.code
if (!is.null(epoch_data$beh.code)) {
beh_codes[i] <- epoch_data$beh.code[[1]]
} else {
warning("  missing beh.code for epoch ", i, " in subject ", subject_id)
beh_codes[i] <- NA
}
}
# create tibble
trial_info <- tibble(
subject = subject_id,
trial_idx = trial_indices,
beh_code = beh_codes,
eeg_included = TRUE  # all trials in this file survived eeg preprocessing
) %>%
filter(!is.na(trial_idx))  # remove any epochs with missing trial info
if (verbose) {
message("    loaded ", nrow(trial_info), " epochs")
message("    behavioral codes present: ",
paste(sort(unique(trial_info$beh_code)), collapse = ", "))
}
return(trial_info)
}, error = function(e) {
warning("  error reading .set file for subject ", subject_id, ": ", e$message)
return(NULL)
})
})
if (nrow(all_trial_info) == 0) {
stop("no trial info loaded from any subjects")
}
if (verbose) {
message("\n=== LOADING COMPLETE ===")
message("  subjects loaded: ", n_distinct(all_trial_info$subject))
message("  total eeg-included trials: ", nrow(all_trial_info))
message("  trials per subject (mean): ", round(nrow(all_trial_info) / n_distinct(all_trial_info$subject), 1))
}
return(all_trial_info)
}
# === TESTING FUNCTION ===
test_eeg_trial_loading <- function(eeg_dir, test_subject = NULL) {
# test the eeg trial info loading with diagnostic output
#
# inputs:
#   eeg_dir - path to preprocessed eeg folder
#   test_subject - optional single subject id to test (e.g., "390002")
cat("\n=== TESTING EEG TRIAL INFO LOADING ===\n\n")
# test 1: load one subject
if (!is.null(test_subject)) {
cat("TEST 1: loading single subject (", test_subject, ")\n")
cat("-------------------------------------------\n")
trial_info <- load_eeg_trial_info(eeg_dir, subjects = test_subject, verbose = TRUE)
cat("\nRESULTS:\n")
print(head(trial_info, 10))
cat("\nSUMMARY STATISTICS:\n")
cat("  total trials:", nrow(trial_info), "\n")
cat("  trial_idx range:", min(trial_info$trial_idx), "-", max(trial_info$trial_idx), "\n")
cat("  unique codes:", paste(sort(unique(trial_info$beh_code)), collapse = ", "), "\n")
# check for issues
cat("\nVALIDATION CHECKS:\n")
if (any(is.na(trial_info$trial_idx))) {
cat("  âœ— WARNING: found", sum(is.na(trial_info$trial_idx)), "NA trial_idx values\n")
} else {
cat("  âœ“ no NA trial_idx values\n")
}
if (any(duplicated(trial_info$trial_idx))) {
cat("  âœ— WARNING: found duplicate trial_idx values\n")
} else {
cat("  âœ“ no duplicate trial_idx values\n")
}
return(trial_info)
}
# test 2: load all subjects
cat("TEST 2: loading all subjects\n")
cat("-------------------------------------------\n")
all_trial_info <- load_eeg_trial_info(eeg_dir, verbose = TRUE)
cat("\nPER-SUBJECT SUMMARY:\n")
subject_summary <- all_trial_info %>%
group_by(subject) %>%
summarise(
n_trials = n(),
n_codes = n_distinct(beh_code),
codes_present = paste(sort(unique(beh_code)), collapse = ",")
) %>%
arrange(subject)
print(subject_summary)
return(all_trial_info)
}
source("config/paths.R")
source("functions/load_eeg_trial_info.R")
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
# reload the updated function
source("functions/load_eeg_trial_info.R")
# now test again
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
# completely restart R session (in RStudio: Session > Restart R)
# OR clear the environment:
rm(list = ls())
# now reload everything fresh
source("config/paths.R")
source("functions/load_eeg_trial_info.R")
# test again
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
# remove the specific function from memory
rm(load_eeg_trial_info, test_eeg_trial_loading)
# reload
source("functions/load_eeg_trial_info.R")
# test
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
# remove the specific function from memory
rm(load_eeg_trial_info, test_eeg_trial_loading)
# reload
source("functions/load_eeg_trial_info.R")
# test
test_data <- test_eeg_trial_loading(eeg_dir, test_subject = "390002")
# check what's actually loaded
body(load_eeg_trial_info) %>% head(20)
